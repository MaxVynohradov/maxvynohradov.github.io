{"version":3,"sources":["webpack:///./node_modules/reading-time/index.js","webpack:///./src/components/blog/PostListItem.tsx","webpack:///./src/templates/BlogPostsList.tsx","webpack:///./node_modules/reading-time/lib/reading-time.js"],"names":["module","exports","PostListItem","props","slug","title","description","date","tags","coverImgSrc","stats","postLink","useLocation","pathname","timeToRead","text","wordsCount","words","query","BlogPostsList","postList","data","allMdx","edges","map","node","frontmatter","body","readingTime","wordsPerMinute","coverImg","childImageSharp","fluid","src","item","idx","key","toString","ansiWordBound","c","options","wordBound","i","start","end","length","minutes","time","Math","ceil","toFixed"],"mappings":"iFAAAA,EAAOC,QAAU,EAAQ,S,uJCeZC,EAAkC,SAACC,GAAyB,IAC/DC,EAA6DD,EAA7DC,KAAMC,EAAuDF,EAAvDE,MAAOC,EAAgDH,EAAhDG,YAAaC,EAAmCJ,EAAnCI,KAAMC,EAA6BL,EAA7BK,KAAMC,EAAuBN,EAAvBM,YAAaC,EAAUP,EAAVO,MAErDC,EAAwB,MADTC,wBAAbC,SACS,QAA2BT,EAASA,EACrD,OACE,kBAAC,IAAD,KACE,gCACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAiBK,YAAaA,IAC9B,kBAAC,IAAD,CAAWE,SAAUA,EAAUN,MAAOA,KAExC,kBAAC,IAAD,CAAUE,KAAMA,EAAMO,WAAYJ,EAAMK,KAAMC,WAAYN,EAAMO,QAChE,kBAAC,IAAD,CAAaT,KAAMA,KAErB,kBAAC,IAAD,CAAiBF,YAAaA,EAAaK,SAAUA,MCF9CO,EAAQ,aA0BNC,UA9CsB,SAAChB,GAAqB,IAEnDiB,EADWjB,EAATkB,KACcC,OAAOC,MAAMC,KAAI,oBAAGC,KAAQrB,EAAX,EAAWA,KAAMsB,EAAjB,EAAiBA,YAAaC,EAA9B,EAA8BA,KAA9B,MAA4C,CACjFvB,OACAM,MAAOkB,IAAYD,EAAM,CAAEE,eAAgB,MAC3CtB,KAAMmB,EAAYnB,KAClBD,YAAaoB,EAAYpB,YACzBE,KAAMkB,EAAYlB,KAClBH,MAAOqB,EAAYrB,MACnBI,YAAaiB,EAAYI,SAASC,gBAAgBC,MAAMC,QAE1D,OACE,6BACGb,EAASI,KAAI,SAACU,EAAqBC,GAAtB,OACZ,kBAAC,EAAD,eAAcC,IAAKD,EAAIE,YAAgBH,U,kCCd/C,SAASI,EAAcC,GACrB,MAAO,MAAQA,GAAK,OAASA,GAAK,OAASA,GAAK,OAASA,EAoD3DvC,EAAOC,QAjDP,SAAqBc,EAAMyB,GACzB,IAGIC,EACAC,EAJAzB,EAAQ,EACR0B,EAAQ,EACRC,EAAM7B,EAAK8B,OAAS,EASxB,KANAL,EAAUA,GAAW,IAEbX,eAAiBW,EAAQX,gBAAkB,IAEnDY,EAAYD,EAAQC,WAAaH,EAE1BG,EAAU1B,EAAK4B,KACpBA,IAGF,KAAOF,EAAU1B,EAAK6B,KACpBA,IAIF,IAAKF,EAAIC,EAAOD,GAAKE,GAAM,CACzB,KAAOF,GAAKE,IAAQH,EAAU1B,EAAK2B,IAAKA,KAMxC,IAFAzB,IAEOyB,GAAKE,GAAOH,EAAU1B,EAAK2B,IAAKA,MAMzC,IAAII,EAAU7B,EAAQuB,EAAQX,eAC1BkB,EAAiB,GAAVD,EAAe,IAE1B,MAAO,CACL/B,KAFciC,KAAKC,KAAKH,EAAQI,QAAQ,IAEtB,YAClBJ,QAASA,EACTC,KAAMA,EACN9B,MAAOA","file":"component---src-templates-blog-posts-list-tsx-52576a09e9332fbd2d9f.js","sourcesContent":["module.exports = require('./lib/reading-time');","// eslint-disable-next-line import/no-extraneous-dependencies\nimport { useLocation } from '@reach/router';\nimport React, { FC } from 'react';\n\nimport { PostItemProps } from './interfaces/PostItemProps';\nimport {\n  PostDescription,\n  PostHeaderImage,\n  PostMeta,\n  PostSectionContainer,\n  PostTagList,\n  PostTitle,\n  PostTitleWrapper,\n} from './post';\n\nexport const PostListItem: FC<PostItemProps> = (props: PostItemProps) => {\n  const { slug, title, description, date, tags, coverImgSrc, stats } = props;\n  const { pathname } = useLocation();\n  const postLink = pathname === '/' ? `blog/${slug}` : slug;\n  return (\n    <PostSectionContainer>\n      <header>\n        <PostTitleWrapper>\n          <PostHeaderImage coverImgSrc={coverImgSrc} />\n          <PostTitle postLink={postLink} title={title} />\n        </PostTitleWrapper>\n        <PostMeta date={date} timeToRead={stats.text} wordsCount={stats.words} />\n        <PostTagList tags={tags} />\n      </header>\n      <PostDescription description={description} postLink={postLink} />\n    </PostSectionContainer>\n  );\n};\n","import { graphql, PageProps } from 'gatsby';\nimport React, { FC } from 'react';\nimport readingTime from 'reading-time';\n\nimport { PostItemProps } from '../components/blog/interfaces/PostItemProps';\nimport { PostListItem } from '../components/blog/PostListItem';\n\nconst BlogPostsList: FC<PageProps> = (props: PageProps) => {\n  const { data } = props;\n  const postList = data.allMdx.edges.map(({ node: { slug, frontmatter, body } }) => ({\n    slug,\n    stats: readingTime(body, { wordsPerMinute: 360 }),\n    date: frontmatter.date,\n    description: frontmatter.description,\n    tags: frontmatter.tags,\n    title: frontmatter.title,\n    coverImgSrc: frontmatter.coverImg.childImageSharp.fluid.src,\n  }));\n  return (\n    <div>\n      {postList.map((item: PostItemProps, idx) => (\n        <PostListItem key={idx.toString()} {...item} />\n      ))}\n    </div>\n  );\n};\n\nexport const query = graphql`\n  query BlogPostQuery {\n    allMdx(sort: { fields: [frontmatter___date], order: DESC }, limit: 1000) {\n      edges {\n        node {\n          slug\n          body\n          frontmatter {\n            title\n            description\n            date\n            tags\n            coverImg {\n              childImageSharp {\n                fluid(maxWidth: 1024) {\n                  src\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n\nexport default BlogPostsList;\n","/*!\n * reading-time\n * Copyright (c) Nicolas Gryman <ngryman@gmail.com>\n * MIT Licensed\n */\n'use strict';\n\nfunction ansiWordBound(c) {\n  return ' ' === c || '\\n' === c || '\\r' === c || '\\t' === c;\n}\n\nfunction readingTime(text, options) {\n  var words = 0,\n      start = 0,\n      end = text.length - 1,\n      wordBound,\n      i;\n  options = options || {}; // use default values if necessary\n\n  options.wordsPerMinute = options.wordsPerMinute || 200; // use provided function if available\n\n  wordBound = options.wordBound || ansiWordBound; // fetch bounds\n\n  while (wordBound(text[start])) {\n    start++;\n  }\n\n  while (wordBound(text[end])) {\n    end--;\n  } // calculate the number of words\n\n\n  for (i = start; i <= end;) {\n    for (; i <= end && !wordBound(text[i]); i++) {\n      ;\n    }\n\n    words++;\n\n    for (; i <= end && wordBound(text[i]); i++) {\n      ;\n    }\n  } // reading time stats\n\n\n  var minutes = words / options.wordsPerMinute;\n  var time = minutes * 60 * 1000;\n  var displayed = Math.ceil(minutes.toFixed(2));\n  return {\n    text: displayed + ' min read',\n    minutes: minutes,\n    time: time,\n    words: words\n  };\n}\n/**\n * Export\n */\n\n\nmodule.exports = readingTime;"],"sourceRoot":""}