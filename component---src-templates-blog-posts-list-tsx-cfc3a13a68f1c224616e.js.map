{"version":3,"sources":["webpack:///./node_modules/reading-time/index.js","webpack:///./src/components/blog/PostListItem.tsx","webpack:///./src/templates/BlogPostsList.tsx","webpack:///./node_modules/reading-time/lib/reading-time.js"],"names":["module","exports","PostListItem","props","slug","title","description","date","tags","coverImgSrc","stats","originalUrl","postLink","useLocation","pathname","toString","timeToRead","text","wordsCount","words","query","BlogPostsList","data","postList","allMdx","edges","map","node","frontmatter","body","readingTime","wordsPerMinute","coverImg","childImageSharp","fluid","src","seoImage","profileImage","fixed","Helmet","name","content","SEO","image","item","idx","key","ansiWordBound","c","options","wordBound","i","start","end","length","minutes","time","Math","ceil","toFixed"],"mappings":"iFAAAA,EAAOC,QAAU,EAAQ,S,mKCeZC,EAAkC,SAACC,GAAyB,IAC/DC,EAA0ED,EAA1EC,KAAMC,EAAoEF,EAApEE,MAAOC,EAA6DH,EAA7DG,YAAaC,EAAgDJ,EAAhDI,KAAMC,EAA0CL,EAA1CK,KAAMC,EAAoCN,EAApCM,YAAaC,EAAuBP,EAAvBO,MAAOC,EAAgBR,EAAhBQ,YAE5DC,EAAwB,MADTC,wBAAbC,SACS,QAA2BV,EAASA,EACrD,OACE,kBAAC,IAAD,KACE,gCACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAiBK,YAAaA,IAC9B,kBAAC,IAAD,CAAWG,SAAUA,EAAUP,MAAOA,KAExC,kBAAC,IAAD,CAAUE,KAAMA,EAAKQ,WAAYC,WAAYN,EAAMO,KAAMC,WAAYR,EAAMS,QAC3E,kBAAC,IAAD,CAAaX,KAAMA,KAErB,kBAAC,IAAD,CAAiBF,YAAaA,EAAaM,SAAUA,EAAUD,YAAaA,M,YCUrES,EAAQ,aAoCNC,UAlEsB,SAAClB,GAAqB,IACjDmB,EAASnB,EAATmB,KACFC,EAAWD,EAAKE,OAAOC,MAAMC,KAAI,oBAAGC,KAAQvB,EAAX,EAAWA,KAAMwB,EAAjB,EAAiBA,YAAaC,EAA9B,EAA8BA,KAA9B,MAA4C,CACjFzB,OACAM,MAAOoB,IAAYD,EAAM,CAAEE,eAAgB,MAC3CxB,KAAMqB,EAAYrB,KAClBD,YAAasB,EAAYtB,YACzBK,YAAaiB,EAAYjB,YACzBH,KAAMoB,EAAYpB,KAClBH,MAAOuB,EAAYvB,MACnBI,YAAamB,EAAYI,SAASC,gBAAgBC,MAAMC,QAIpDC,EAAWd,EAAKe,aAAaJ,gBAAgBK,MACnD,OACE,6BACE,kBAACC,EAAA,EAAD,KACE,0BAAMC,KAAK,2BAA2BC,QAAQ,gDAC9C,0BAAMD,KAAK,sBAAsBC,QAAQ,qBACzC,0BAAMD,KAAK,gBAAgBC,QAAQ,sCAErC,kBAACC,EAAA,EAAD,CAAKC,MAAOP,IACXb,EAASG,KAAI,SAACkB,EAAqBC,GAAtB,OACZ,kBAAC,EAAD,eAAcC,IAAKD,EAAI9B,YAAgB6B,U,kCC1B/C,SAASG,EAAcC,GACrB,MAAO,MAAQA,GAAK,OAASA,GAAK,OAASA,GAAK,OAASA,EAoD3DhD,EAAOC,QAjDP,SAAqBgB,EAAMgC,GACzB,IAGIC,EACAC,EAJAhC,EAAQ,EACRiC,EAAQ,EACRC,EAAMpC,EAAKqC,OAAS,EASxB,KANAL,EAAUA,GAAW,IAEblB,eAAiBkB,EAAQlB,gBAAkB,IAEnDmB,EAAYD,EAAQC,WAAaH,EAE1BG,EAAUjC,EAAKmC,KACpBA,IAGF,KAAOF,EAAUjC,EAAKoC,KACpBA,IAIF,IAAKF,EAAIC,EAAOD,GAAKE,GAAM,CACzB,KAAOF,GAAKE,IAAQH,EAAUjC,EAAKkC,IAAKA,KAMxC,IAFAhC,IAEOgC,GAAKE,GAAOH,EAAUjC,EAAKkC,IAAKA,MAMzC,IAAII,EAAUpC,EAAQ8B,EAAQlB,eAC1ByB,EAAiB,GAAVD,EAAe,IAE1B,MAAO,CACLtC,KAFcwC,KAAKC,KAAKH,EAAQI,QAAQ,IAEtB,YAClBJ,QAASA,EACTC,KAAMA,EACNrC,MAAOA","file":"component---src-templates-blog-posts-list-tsx-cfc3a13a68f1c224616e.js","sourcesContent":["module.exports = require('./lib/reading-time');","// eslint-disable-next-line import/no-extraneous-dependencies\nimport { useLocation } from '@reach/router';\nimport React, { FC } from 'react';\n\nimport { PostItemProps } from './interfaces/PostItemProps';\nimport {\n  PostDescription,\n  PostHeaderImage,\n  PostMeta,\n  PostSectionContainer,\n  PostTagList,\n  PostTitle,\n  PostTitleWrapper,\n} from './post';\n\nexport const PostListItem: FC<PostItemProps> = (props: PostItemProps) => {\n  const { slug, title, description, date, tags, coverImgSrc, stats, originalUrl } = props;\n  const { pathname } = useLocation();\n  const postLink = pathname === '/' ? `blog/${slug}` : slug;\n  return (\n    <PostSectionContainer>\n      <header>\n        <PostTitleWrapper>\n          <PostHeaderImage coverImgSrc={coverImgSrc} />\n          <PostTitle postLink={postLink} title={title} />\n        </PostTitleWrapper>\n        <PostMeta date={date.toString()} timeToRead={stats.text} wordsCount={stats.words} />\n        <PostTagList tags={tags} />\n      </header>\n      <PostDescription description={description} postLink={postLink} originalUrl={originalUrl} />\n    </PostSectionContainer>\n  );\n};\n","import { graphql, PageProps } from 'gatsby';\nimport React, { FC } from 'react';\nimport { Helmet } from 'react-helmet';\nimport readingTime from 'reading-time';\n\nimport { PostItemProps } from '../components/blog/interfaces/PostItemProps';\nimport { PostListItem } from '../components/blog/PostListItem';\nimport SEO from '../components/SEO';\n\nconst BlogPostsList: FC<PageProps> = (props: PageProps) => {\n  const { data } = props;\n  const postList = data.allMdx.edges.map(({ node: { slug, frontmatter, body } }) => ({\n    slug,\n    stats: readingTime(body, { wordsPerMinute: 360 }),\n    date: frontmatter.date,\n    description: frontmatter.description,\n    originalUrl: frontmatter.originalUrl,\n    tags: frontmatter.tags,\n    title: frontmatter.title,\n    coverImgSrc: frontmatter.coverImg.childImageSharp.fluid.src,\n  }));\n  // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n  // @ts-ignore\n  const seoImage = data.profileImage.childImageSharp.fixed;\n  return (\n    <div>\n      <Helmet>\n        <meta name=\"google-site-verification\" content=\"3nW_Loo81kowYXSp_stzMufeF24lMB-m9zQCZAwuTiE\" />\n        <meta name=\"yandex-verification\" content=\"577ed1e1bb427dd9\" />\n        <meta name=\"msvalidate.01\" content=\"FF958DC350391A726E42368F26F6A4B9\" />\n      </Helmet>\n      <SEO image={seoImage} />\n      {postList.map((item: PostItemProps, idx: number) => (\n        <PostListItem key={idx.toString()} {...item} />\n      ))}\n    </div>\n  );\n};\n\nexport const query = graphql`\n  query BlogPostQuery {\n    profileImage: file(relativePath: { eq: \"profile.jpg\" }) {\n      childImageSharp {\n        fixed {\n          height\n          width\n          src\n        }\n      }\n    }\n    allMdx(sort: { fields: [frontmatter___date], order: DESC }, limit: 1000) {\n      edges {\n        node {\n          slug\n          body\n          frontmatter {\n            title\n            description\n            originalUrl\n            date\n            tags\n            coverImg {\n              childImageSharp {\n                fluid(maxWidth: 1024) {\n                  src\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n\nexport default BlogPostsList;\n","/*!\n * reading-time\n * Copyright (c) Nicolas Gryman <ngryman@gmail.com>\n * MIT Licensed\n */\n'use strict';\n\nfunction ansiWordBound(c) {\n  return ' ' === c || '\\n' === c || '\\r' === c || '\\t' === c;\n}\n\nfunction readingTime(text, options) {\n  var words = 0,\n      start = 0,\n      end = text.length - 1,\n      wordBound,\n      i;\n  options = options || {}; // use default values if necessary\n\n  options.wordsPerMinute = options.wordsPerMinute || 200; // use provided function if available\n\n  wordBound = options.wordBound || ansiWordBound; // fetch bounds\n\n  while (wordBound(text[start])) {\n    start++;\n  }\n\n  while (wordBound(text[end])) {\n    end--;\n  } // calculate the number of words\n\n\n  for (i = start; i <= end;) {\n    for (; i <= end && !wordBound(text[i]); i++) {\n      ;\n    }\n\n    words++;\n\n    for (; i <= end && wordBound(text[i]); i++) {\n      ;\n    }\n  } // reading time stats\n\n\n  var minutes = words / options.wordsPerMinute;\n  var time = minutes * 60 * 1000;\n  var displayed = Math.ceil(minutes.toFixed(2));\n  return {\n    text: displayed + ' min read',\n    minutes: minutes,\n    time: time,\n    words: words\n  };\n}\n/**\n * Export\n */\n\n\nmodule.exports = readingTime;"],"sourceRoot":""}